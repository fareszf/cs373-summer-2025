# Python Function Arguments, Defaults, and Unpacking
# ===================================================

# FunctionKeywords.py
# -------------------

# Note 1:
# Named (keyword) arguments must match parameter names in the function signature.

# Note 2:
# When mixing positional and named arguments in a function call:
# - Positional arguments must come first.
# - Named arguments can follow in any order.

# ---------------------------------------------------

# FunctionDefaults.py
# -------------------

# Rule:
# In a function definition, non-default parameters cannot follow default ones.

# Example: INVALID
# def example(a=1, b):  # Error
#     pass

# Function with mutable default argument
def h1(x = []):  # x defaults to an empty list, which is shared across calls!
    x += [2]     # Adds 2 to the list (in-place)
    return x

# --------------------------------------
# Lines 35–39: Test different calls to h1
# --------------------------------------

# Line 35
assert h1() == [2]
# - First call with no argument
# - Default list x = []
# - Adds 2 → [2]
# - Returns [2]

# Line 36
assert h1() == [2, 2]
# - Calls with no argument again
# - Reuses the same default list from before: [2]
# - Adds another 2 → [2, 2]
# - Returns [2, 2]

# Line 37
assert h1([1]) == [1, 2]
# - Explicitly passes in [1]
# - Does NOT use the default list
# - Adds 2 → [1, 2]
# - Returns [1, 2]

# Line 38
assert h1() == [2, 2, 2]
# - Again uses the shared default list
# - Current value of default x is [2, 2]
# - Adds another 2 → [2, 2, 2]
# - Returns [2, 2, 2]

# Line 39
assert h1([1]) == [1, 2]
# - Again passes a new list [1]
# - Adds 2 → [1, 2]
# - Returns [1, 2]

# Problem: Default list is created once and reused

# Lines 43–45: Define the function h2 with an immutable default (empty tuple)

def h2(x = ()):  # immutable default argument (tuple)
    x += (2,)    # creates a new tuple by appending 2
    return x

# ---------------------------------------
# Lines 47–51: Test different calls to h2
# ---------------------------------------

# Line 47
assert h2() == (2,)
# - Called with no argument
# - x defaults to ()
# - Adds 2 → new tuple: (2,)
# - Returns (2,)

# Line 48
assert h2() == (2,)
# - Called again with no argument
# - x again defaults to ()
# - No shared state → new tuple: (2,)
# - Returns (2,)

# Line 49
assert h2((1,)) == (1, 2)
# - Passes in tuple (1,)
# - Adds 2 → (1, 2)
# - Returns (1, 2)

# Line 50
assert h2() == (2,)
# - Still no argument
# - Returns a fresh (2,) again

# Line 51
assert h2((1,)) == (1, 2)
# - Same as before
# - Clean and predictable output

# ---------------------------------------
# Recommendation:
# ---------------------------------------
# Use immutable types (like tuples) as default values.
# Avoid mutable defaults like lists or dictionaries.
#    They retain changes between function calls.

# Alternative: Use None
# h3: Safe use of mutable default via None
# Lines 55–59

def h3(x = None):
    if x is None:
        x = []
    x += [2]
    return x

# Lines 61–66: Test calls

assert h3()     == [2]
assert h3()     == [2]
assert h3([1])  == [1, 2]
assert h3()     == [2]
assert h3([1])  == [1, 2]
assert h3(None) == [2]

# Summary:
# - h3() returns [2] each time when called without args.
# - A new list is created on each call (x = [] inside).
# - Contrast with h1(): reused the same list.
# - Recommended: use x=None for mutable defaults.
# ---------------------------------------------------

# FunctionUnpacking.py
# ---------------------

# Rules when calling a function:
# - Positional arguments must come first
# - Then named arguments
# - Then unpacked iterables (*args) or dictionaries (**kwargs)

def f(x, y, z):
    return [x, y, z]

t = (3, 4)

assert f(z=2, *t) == [3, 4, 2]
assert f(*t, z=2) == [3, 4, 2]
# assert f(*t, x=2)  # Error: multiple values for 'x'

assert f(2, *t) == [2, 3, 4]
# assert f(*t, 2)  # SyntaxError: positional must come first

# ---------------------------------------------------

# FunctionTuple.py
# ----------------

# *t as an argument (call) → unpacking
# *t as a parameter (definition) → packing

def pack_example(*args):  # packs into a tuple
    return args

print(pack_example(1, 2, 3))  # → (1, 2, 3)

# ---------------------------------------------------

# FunctionDict.py
# ----------------

# **d as an argument (call) → unpacking
# **d as a parameter (definition) → packing

def pack_keywords(**kwargs):  # packs into a dictionary
    return kwargs

print(pack_keywords(a=1, b=2))  # → {'a': 1, 'b': 2}

# ---------------------------------------------------

# Summary of Argument Ordering and Evaluation Rules in Function Calls
# -------------------------

# Syntax Rules:
# - Positional → Named 
# - Positional → **kwargs
# - *args → **kwargs

# Semantic Rules:
# - {Positional, *args}, then Named, then **kwargs

# Always keep positional arguments first
# Unpack iterables before unpacking dictionaries
# Be cautious of name conflicts when unpacking

# End of Notes
