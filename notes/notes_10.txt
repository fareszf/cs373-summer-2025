Lambdas:
--------
>>> def make_inc_b(j):
...     return lambda i: i + j
...
>>> x = make_inc_b(1)(2)
>>> x
3

>>> def make_inc_b(j, k):
...     return lambda i: i + j + k
...
>>> x = make_inc_b(1, 2)(2)
>>> x
5

>>> def make_inc_b(j):
...     return lambda i, k: i + k + j
...
>>> x = make_inc_b(1)(2, 3)
>>> x
6

Functions.py
------------
class Person:
    def __init__(self, name):
        self.name = name

    def greet(self):
        print(f"Hello, my name is {self.name}")

p = Person("Alice")
p.greet()  # Behind the scenes, Python translates this to: Person.greet(p)


Person.greet(p)  # Works the same as p.greet()

__call__:
---------
class Greeter:
    def __init__(self, name):
        self.name = name

    def __call__(self):
        print(f"Hello from {self.name}!")

g = Greeter("Alice")

# Call like a function!
g()  # Internally this runs: g.__call__()

# So the object behaves like a function in addition to being a class instance.

Functions.py reference:
https://www.programiz.com/article/python-self-why
--------------------------
